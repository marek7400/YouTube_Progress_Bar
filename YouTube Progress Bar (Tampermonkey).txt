// ==UserScript==
// @name         YouTube Custom Progress Bar
// @namespace    http://tampermonkey.net/
// @version      1.2
// @description  Adds a customizable progress bar at the bottom of YouTube videos, adapted from the extension.
// @author       marek7400
// @match        https://www.youtube.com/*
// @match        https://www.youtube-nocookie.com/embed/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_addStyle
// @grant        GM_registerMenuCommand
// @grant        unsafeWindow
// @run-at       document-start
// ==/UserScript==

(function() {
    'use strict';

    // --- DEFAULT OPTIONS AND VARIABLES ---

    const defaultOptions = {
        enabled: true,
        progressColor: '#F76400',
        progressOpacity: 1,
        bufferColor: '#808080',
        bufferOpacity: 1,
        unbufferedColor: '#000000',
        unbufferedOpacity: 1,
        barHeight: 3,
        zIndex: 60,
        chaptersEnabled: true,
        chapterMarkerColor: '#FFFFFF'
    };

    let options = {};
    let customBar, progressBar, bufferBar, unbufferedBar;
    let chapterMarkersContainer;
    let currentVideoIdForChapters = null;
    let animationFrameId = null;

    // --- STYLES ---

    GM_addStyle(`
        #custom-progress-bar {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: var(--ytpb-bar-height, 3px);
            z-index: var(--ytpb-z-index, 60);
            display: none; /* Initially hidden, controlled by JS */
        }
        #custom-progress-bar.ytpb-enabled {
            display: block;
        }
        #custom-progress, #custom-buffer, #custom-unbuffered {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            width: 0; /* Initially 0 */
        }
        #custom-progress {
            background-color: var(--ytpb-progress-color, #F76400);
            z-index: 3;
        }
        #custom-buffer {
            background-color: var(--ytpb-buffer-color, #808080);
            z-index: 2;
        }
        #custom-unbuffered {
            background-color: var(--ytpb-unbuffered-color, #000000);
            width: 100%;
            z-index: 1;
        }
        #custom-chapter-markers {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 100%;
            pointer-events: none;
            z-index: 4;
        }
        .custom-chapter-marker {
            position: absolute;
            top: 0;
            width: 2px;
            height: 100%;
            background-color: var(--ytpb-chapter-marker-color, #FFFFFF);
            transform: translateX(-50%);
        }
        /* Settings Modal Styles */
        #ytpb-settings-modal {
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 99999;
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: 'Roboto', 'Arial', sans-serif;
        }
        #ytpb-settings-content {
            background-color: #282828;
            color: #fff;
            padding: 20px;
            border-radius: 12px;
            width: 400px;
            max-height: 80vh;
            overflow-y: auto;
        }
        #ytpb-settings-content h2 {
            margin-top: 0;
            border-bottom: 1px solid #555;
            padding-bottom: 10px;
        }
        #ytpb-settings-content label {
            display: block;
            margin: 15px 0;
        }
        #ytpb-settings-content input[type="color"],
        #ytpb-settings-content input[type="number"],
        #ytpb-settings-content input[type="range"] {
            margin-left: 10px;
            vertical-align: middle;
        }
        #ytpb-settings-buttons {
            margin-top: 20px;
            text-align: right;
        }
        #ytpb-settings-buttons button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            margin-left: 10px;
            cursor: pointer;
        }
        #ytpb-settings-save {
            background-color: #4CAF50;
            color: white;
        }
        #ytpb-settings-close {
            background-color: #f44336;
            color: white;
        }
    `);

    // --- OPTIONS MANAGEMENT (GM_setValue / GM_getValue) ---

    function loadOptions() {
        const savedOptions = GM_getValue('YTPB_options', JSON.stringify(defaultOptions));
        // Merge saved options with defaults to ensure all keys exist
        options = { ...defaultOptions, ...JSON.parse(savedOptions) };
    }

    function saveOptions() {
        GM_setValue('YTPB_options', JSON.stringify(options));
    }


    // --- CORE PROGRESS BAR LOGIC ---

    function createProgressBar() {
        const player = document.querySelector('.html5-video-player');
        if (!player || customBar) return;

        customBar = document.createElement('div');
        customBar.id = 'custom-progress-bar';

        unbufferedBar = document.createElement('div');
        unbufferedBar.id = 'custom-unbuffered';
        bufferBar = document.createElement('div');
        bufferBar.id = 'custom-buffer';
        progressBar = document.createElement('div');
        progressBar.id = 'custom-progress';

        customBar.appendChild(unbufferedBar);
        customBar.appendChild(bufferBar);
        customBar.appendChild(progressBar);

        if (options.chaptersEnabled) {
            chapterMarkersContainer = document.createElement('div');
            chapterMarkersContainer.id = 'custom-chapter-markers';
            customBar.appendChild(chapterMarkersContainer);
        }
        player.appendChild(customBar);
    }

    function removeProgressBar() {
        if (animationFrameId) {
            cancelAnimationFrame(animationFrameId);
            animationFrameId = null;
        }
        if (customBar) {
            customBar.remove();
            customBar = null;
        }
    }

    function updateProgressBar() {
        if (!options.enabled || !customBar) {
            if (animationFrameId) cancelAnimationFrame(animationFrameId);
            return;
        }
        const video = document.querySelector('.html5-main-video');
        if (!video || isNaN(video.duration) || video.duration === 0) {
            animationFrameId = requestAnimationFrame(updateProgressBar);
            return;
        }

        const progressPercent = (video.currentTime / video.duration) * 100;
        progressBar.style.width = `${progressPercent}%`;

        if (video.buffered.length > 0) {
            const bufferedTime = video.buffered.end(video.buffered.length - 1);
            const bufferedPercent = (bufferedTime / video.duration) * 100;
            bufferBar.style.width = `${bufferedPercent}%`;
        }

        animationFrameId = requestAnimationFrame(updateProgressBar);
    }

    // --- CHAPTERS LOGIC (using unsafeWindow) ---

    function getChapterDataFromPage() {
        try {
            const player = unsafeWindow.document.querySelector('.html5-video-player');
            if (player && typeof player.getPlayerResponse === 'function') {
                const videoData = player.getPlayerResponse();
                if (videoData && videoData.videoDetails) {
                    return {
                        description: videoData.videoDetails.shortDescription,
                        durationSeconds: videoData.videoDetails.lengthSeconds,
                        videoId: videoData.videoDetails.videoId
                    };
                }
            }
        } catch (e) {
            console.warn('YTPB: Error getting chapter data from page.', e);
        }
        return null;
    }


    function drawChapterMarkers() {
        if (!options.chaptersEnabled || !customBar || !chapterMarkersContainer) {
            if (chapterMarkersContainer) chapterMarkersContainer.innerHTML = '';
            return;
        }

        const chapterData = getChapterDataFromPage();
        if (!chapterData || !chapterData.description || !chapterData.durationSeconds) {
            chapterMarkersContainer.innerHTML = '';
            return;
        }

        if (chapterData.videoId === currentVideoIdForChapters) return; // Avoid re-drawing for the same video
        currentVideoIdForChapters = chapterData.videoId;
        chapterMarkersContainer.innerHTML = ''; // Clear previous

        const lines = chapterData.description.split('\n');
        const regex = /((?<h>\d{0,2}):)?(?<m>\d{1,2}):(?<s>\d{2})/;
        const convertToSeconds = (h, m, s) => (parseInt(h) || 0) * 3600 + (parseInt(m) || 0) * 60 + (parseInt(s) || 0);

        for (const line of lines) {
            const match = line.match(regex);
            if (match && match.groups) {
                const chapterTimeSeconds = convertToSeconds(match.groups.h, match.groups.m, match.groups.s);
                const percent = (chapterTimeSeconds / chapterData.durationSeconds) * 100;

                if (chapterTimeSeconds > 0 && percent < 100) {
                    const marker = document.createElement('div');
                    marker.className = 'custom-chapter-marker';
                    marker.style.left = `${percent}%`;
                    chapterMarkersContainer.appendChild(marker);
                }
            }
        }
    }

    // --- MAIN CONTROL FUNCTIONS ---

    function updateStyles() {
        if (!customBar) return;
        const root = document.documentElement;
        root.style.setProperty('--ytpb-progress-color', `${options.progressColor}${Math.round(options.progressOpacity * 255).toString(16).padStart(2, '0')}`);
        root.style.setProperty('--ytpb-buffer-color', `${options.bufferColor}${Math.round(options.bufferOpacity * 255).toString(16).padStart(2, '0')}`);
        root.style.setProperty('--ytpb-unbuffered-color', `${options.unbufferedColor}${Math.round(options.unbufferedOpacity * 255).toString(16).padStart(2, '0')}`);
        root.style.setProperty('--ytpb-chapter-marker-color', options.chapterMarkerColor);
        root.style.setProperty('--ytpb-bar-height', `${options.barHeight}px`);
        root.style.setProperty('--ytpb-z-index', options.zIndex);
    }

    function checkAndAddProgressBar() {
        const player = document.querySelector('.html5-video-player');

        if (options.enabled && player) {
            if (!customBar) {
                createProgressBar();
            }
            customBar.classList.add('ytpb-enabled');
            updateStyles();
            if (options.chaptersEnabled) {
                drawChapterMarkers();
            } else if (chapterMarkersContainer) {
                chapterMarkersContainer.innerHTML = '';
            }
            if (!animationFrameId) {
                updateProgressBar();
            }
        } else {
            removeProgressBar();
        }
    }

    // --- SETTINGS MODAL UI ---

    function openSettingsModal() {
        if (document.getElementById('ytpb-settings-modal')) return;

        const modalHtml = `
            <div id="ytpb-settings-content">
                <h2>Ustawienia Paska Postępu</h2>
                <label><input type="checkbox" id="ytpb-enabled"> Włącz rozszerzenie</label>
                <label>Kolor paska postępu: <input type="color" id="ytpb-progressColor"></label>
                <label>Przezroczystość postępu: <input type="range" id="ytpb-progressOpacity" min="0" max="1" step="0.1"></label>
                <label>Kolor bufora: <input type="color" id="ytpb-bufferColor"></label>
                <label>Przezroczystość bufora: <input type="range" id="ytpb-bufferOpacity" min="0" max="1" step="0.1"></label>
                <label>Kolor tła: <input type="color" id="ytpb-unbufferedColor"></label>
                <label>Przezroczystość tła: <input type="range" id="ytpb-unbufferedOpacity" min="0" max="1" step="0.1"></label>
                <label>Wysokość paska (px): <input type="number" id="ytpb-barHeight" min="1" max="50"></label>
                <label>Warstwa (Z-Index): <input type="number" id="ytpb-zIndex" min="0" max="9999"></label>
                <label><input type="checkbox" id="ytpb-chaptersEnabled"> Włącz znaczniki rozdziałów</label>
                <label>Kolor znaczników: <input type="color" id="ytpb-chapterMarkerColor"></label>
                <div id="ytpb-settings-buttons">
                    <button id="ytpb-settings-save">Zapisz i Zamknij</button>
                    <button id="ytpb-settings-close">Anuluj</button>
                </div>
            </div>
        `;
        const modal = document.createElement('div');
        modal.id = 'ytpb-settings-modal';
        modal.innerHTML = modalHtml;
        document.body.appendChild(modal);

        // Populate fields with current options
        for (const key in options) {
            const el = document.getElementById(`ytpb-${key}`);
            if (el) {
                if (el.type === 'checkbox') el.checked = options[key];
                else el.value = options[key];
            }
        }

        // Add event listeners
        document.getElementById('ytpb-settings-close').addEventListener('click', () => modal.remove());
        document.getElementById('ytpb-settings-save').addEventListener('click', () => {
            for (const key in options) {
                const el = document.getElementById(`ytpb-${key}`);
                if (el) {
                    if (el.type === 'checkbox') options[key] = el.checked;
                    else if (el.type === 'number' || el.type === 'range') options[key] = Number(el.value);
                    else options[key] = el.value;
                }
            }
            saveOptions();
            checkAndAddProgressBar(); // Re-render with new options
            modal.remove();
        });
    }

    // --- INITIALIZATION ---

    function initialize() {
        loadOptions();

        // Observe for player appearing/disappearing and other DOM changes
        const observer = new MutationObserver(() => checkAndAddProgressBar());
        observer.observe(document.body, { childList: true, subtree: true });

        // Handle YouTube's SPA navigation
        document.addEventListener('yt-navigate-finish', () => {
            currentVideoIdForChapters = null; // Reset for new page
            // Give player time to appear
            setTimeout(checkAndAddProgressBar, 500);
        });

        // Register menu command for settings
        GM_registerMenuCommand('Ustawienia Paska Postępu', openSettingsModal);

        // Initial check
        checkAndAddProgressBar();
    }

    // Wait for the DOM to be ready before starting
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        initialize();
    }

})();
